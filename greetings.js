const moment = require("moment-timezone");
const cron = require("node-cron");
const db = require("./db");
const {
  getUserData,
  saveUserData,
  resetUserState,
  getAndMarkRandomFact,
} = require("./userUtils");
const nameVariants = require("./nameVariants");

const morningGreetings = [
  "–î–æ–±—Ä–æ–µ —É—Ç—Ä–µ—á–∫–æ, {name}! üåû –ù–∞–¥–µ—é—Å—å, —Ç–≤–æ–µ —É—Ç—Ä–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!",
  "–° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º, {name}! ‚òÄÔ∏è –ü—É—Å—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å –±—É–¥–µ—Ç –ø–æ–ª–æ–Ω —Ä–∞–¥–æ—Å—Ç–∏!",
  "–ü—Ä–∏–≤–µ—Ç, {name}! üòä –ñ–µ–ª–∞—é —Ç–µ–±–µ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –¥–Ω—è!",
  "–£—Ç—Ä–æ –¥–æ–±—Ä–æ–µ, {name}! üåÖ –ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è —Å–±—É–¥—É—Ç—Å—è —Ç–≤–æ–∏ –º–µ—á—Ç—ã!",
  "–î–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞, {name}! üåº –ñ–µ–ª–∞—é —Ç–µ–±–µ –Ω–æ–≤—ã—Ö –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π!",
  "–ü—Ä–∏–≤–µ—Ç, {name}! üòÑ –ñ–µ–ª–∞—é —Ç–µ–±–µ –æ—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!",
  "–° –Ω–æ–≤—ã–º –¥–Ω–µ–º, {name}! üçÄ –£–¥–∞—á–∏ –≤–æ –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö –¥–µ–ª–∞—Ö!",
  "–£—Ç—Ä–æ –¥–æ–±—Ä–æ–µ, {name}! üåà –ü—É—Å—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å –±—É–¥–µ—Ç —è—Ä–∫–∏–º –∏ –≤–µ—Å–µ–ª—ã–º!",
  "–ü—Ä–∏–≤–µ—Ç, {name}! üå∫ –ñ–µ–ª–∞—é —Ç–µ–±–µ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ —Å–µ–≥–æ–¥–Ω—è!",
];

const eveningGreetings = [
  "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∫–∏, {name}! üåô –ü—É—Å—Ç—å —Ç–≤–æ–∏ —Å–Ω—ã –±—É–¥—É—Ç —Å–ª–∞–¥–∫–∏–º–∏!",
  "–°–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤, {name}! üåü –û—Ç–¥—ã—Ö–∞–π —Ö–æ—Ä–æ—à–æ!",
  "–î–æ–±—Ä–æ–π –Ω–æ—á–∏, {name}! üåå –ñ–µ–ª–∞—é —Ç–µ–±–µ –∫—Ä–µ–ø–∫–æ–≥–æ –∏ —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ —Å–Ω–∞!",
  "–ü—Ä–∏—è—Ç–Ω—ã—Ö —Å–Ω–æ–≤, {name}! üå† –ü—É—Å—Ç—å –∑–≤–µ–∑–¥—ã –æ—Å–≤–µ—â–∞—é—Ç —Ç–≤–æ–π –ø—É—Ç—å!",
  "–°–ø–æ–∫–∏-–Ω–æ–∫–∏, {name}! üåÉ –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –Ω–æ–≤—ã–π –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å!",
  "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, {name}! üò¥ –ñ–µ–ª–∞—é —Ç–µ–±–µ —Ö–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!",
  "–î–æ–±—Ä–æ–π –Ω–æ—á–∏, {name}! üí§ –ü—É—Å—Ç—å —Ç–≤–æ–π —Å–æ–Ω –±—É–¥–µ—Ç –∫—Ä–µ–ø–∫–∏–º!",
  "–ü—Ä–∏—è—Ç–Ω—ã—Ö —Å–Ω–æ–≤, {name}! ‚ú® –ñ–µ–ª–∞—é —Ç–µ–±–µ —Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤!",
  "–°–ø–æ–∫–∏-–Ω–æ–∫–∏, {name}! üåô –û—Ç–¥—ã—Ö–∞–π –∏ –Ω–∞–±–∏—Ä–∞–π—Å—è —Å–∏–ª!",
];

function setupGreetings(
  bot,
  allStickers,
  updateUserCommands,
  updateUserDataInSheet
) {
  function convertToOffset(timezone) {
    if (timezone.startsWith("UTC")) {
      const offset = timezone.slice(3);
      const sign = offset[0];
      const hours = parseInt(offset.slice(1), 10);
      return `${sign}${hours.toString().padStart(2, "0")}:00`;
    }
    return timezone;
  }

  function formatTimezone(tz) {
    return tz === "+03:00" ? "" : ` [UTC${tz}]`;
  }

  function calculateRemainingTime(user, period) {
    const tz = user.timezone || "+03:00";
    const now = moment().utcOffset(tz);
    const time = period === "morning" ? user.morningTime : user.eveningTime;
    if (!time) return null;

    const [hours, minutes] = time.split(":").map(Number);
    const scheduledTimeToday = moment()
      .utcOffset(tz)
      .startOf("day")
      .hours(hours)
      .minutes(minutes);
    if (now.isAfter(scheduledTimeToday)) {
      scheduledTimeToday.add(1, "day");
    }
    const duration = moment.duration(scheduledTimeToday.diff(now));
    const hoursLeft = Math.floor(duration.asHours());
    const minutesLeft = Math.floor(duration.asMinutes()) % 60;
    return { hoursLeft, minutesLeft };
  }

  function formatRemainingTime(hours, minutes) {
    if (hours > 0) {
      return `${hours}—á ${minutes}–º`;
    } else {
      return `${minutes}–º`;
    }
  }

  function getKeyboard(user, includeForgetName = false) {
    const buttons = [
      [
        user.morningTime
          ? {
              text: "–°–±—Ä–æ—Å–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —É—Ç—Ä–æ üåû",
              callback_data: "reset_morning",
            }
          : { text: "–í—Ä–µ–º—è –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è üåû", callback_data: "set_morning" },
        user.eveningTime
          ? {
              text: "–°–±—Ä–æ—Å–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –Ω–æ—á—å üåô",
              callback_data: "reset_evening",
            }
          : {
              text: "–í—Ä–µ–º—è –ª–æ–∂–∏—Ç—å—Å—è —Å–ø–∞—Ç—å üåô",
              callback_data: "set_evening",
            },
      ],
    ];
    if (includeForgetName) {
      buttons.push([
        {
          text: "–ó–∞–±—ã—Ç—å –∏–º—è üôà",
          callback_data: "forget_name",
        },
      ]);
    }
    return { inline_keyboard: buttons };
  }

  bot.onText(/\/hello/, async (msg) => {
    const chatId = msg.chat.id.toString();
    const user = await getUserData(chatId, msg);
    await updateUserCommands(chatId);

    user.helloMessages = user.helloMessages || [];
    user.timeRequestMessages = user.timeRequestMessages || [];
    user.userTimeInputMessages = user.userTimeInputMessages || [];

    if (user.lastHelloCommandId) {
      try {
        await bot.deleteMessage(chatId, user.lastHelloCommandId);
      } catch (error) {
        console.error(
          `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${user.lastHelloCommandId}: ${error.message}`
        );
      }
    }
    user.lastHelloCommandId = msg.message_id;

    if (user.helloMessages.length > 0) {
      for (const messageId of user.helloMessages) {
        try {
          await bot.deleteMessage(chatId, messageId);
        } catch (error) {
          console.error(
            `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId}: ${error.message}`
          );
        }
      }
      user.helloMessages = [];
    }

    await resetUserState(chatId);

    if (!user.name) {
      const sentMessage = await bot.sendMessage(
        chatId,
        "–ü—Ä–∏–≤–µ—Ç–∏–∫ üëãüòú —è –ü—É–ø—Å–∏–∫ ü§ó –ê –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
      );
      user.lastRequestMessageId = sentMessage.message_id;
      user.helloMessages.push(sentMessage.message_id);
      user.state = "waiting_for_name";
      await saveUserData(user);
    } else {
      let message = `–ü—Ä–∏–≤–µ—Ç, ${user.name}! ü§ó`;
      const tz = user.timezone || "+03:00";
      const tzText = formatTimezone(tz);

      if (!user.morningTime && !user.eveningTime) {
        message += `\n–•–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –¥–µ–ª–∞–ª —Ç–≤–æ–π –¥–µ–Ω—å —á—É—Ç–æ—á–∫—É –ª—É—á—à–µ? –Ø –º–æ–≥—É –∂–µ–ª–∞—Ç—å —Ç–µ–±–µ –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞ –¥–ª—è –±–æ–¥—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –∏ —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏ –¥–ª—è —Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤. –ö–∞–∫ —Ç–µ–±–µ –∏–¥–µ–π–∫–∞? ‚ò∫Ô∏è`;
      } else {
        if (user.morningTime) {
          const remaining = calculateRemainingTime(user, "morning");
          const remainingText = formatRemainingTime(
            remaining.hoursLeft,
            remaining.minutesLeft
          );
          message += `\n–£—Ç—Ä–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ ${user.morningTime}${tzText} (–æ—Å—Ç–∞–ª–æ—Å—å ${remainingText})`;
        } else {
          message += `\n–£—Ç—Ä–æ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ`;
        }

        if (user.eveningTime) {
          const remaining = calculateRemainingTime(user, "evening");
          const remainingText = formatRemainingTime(
            remaining.hoursLeft,
            remaining.minutesLeft
          );
          message += `\n–ù–æ—á—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ ${user.eveningTime}${tzText} (–æ—Å—Ç–∞–ª–æ—Å—å ${remainingText})`;
        } else {
          message += `\n–ù–æ—á—å –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞`;
        }
      }

      const keyboard = getKeyboard(user, true);
      const sentMessage = await bot.sendMessage(chatId, message, {
        reply_markup: JSON.stringify(keyboard),
      });
      user.helloMessages.push(sentMessage.message_id);
      await saveUserData(user);
    }
  });

  bot.on("message", async (msg) => {
    if (msg.text && !msg.text.startsWith("/")) {
      const chatId = msg.chat.id.toString();
      const user = await getUserData(chatId, msg);
      const text = msg.text.trim();

      user.helloMessages = user.helloMessages || [];
      user.timeRequestMessages = user.timeRequestMessages || [];
      user.userTimeInputMessages = user.userTimeInputMessages || [];

      if (user.state === "waiting_for_name") {
        if (/–∫–æ—Ç–∏–∫/i.test(text)) {
          return;
        }

        const inputName = text.trim();
        user.name = inputName;
        await saveUserData(user);

        await bot.deleteMessage(chatId, msg.message_id);

        if (user.helloMessages.length > 0) {
          for (const messageId of user.helloMessages) {
            try {
              await bot.deleteMessage(chatId, messageId);
            } catch (error) {
              console.error(
                `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId}: ${error.message}`
              );
            }
          }
          user.helloMessages = [];
        }

        const inputNameLower = inputName.toLowerCase();
        let foundVariants = [];
        let fullNameMatches = [];

        for (const fullName in nameVariants) {
          const fullNameLower = fullName.toLowerCase();
          const variants = nameVariants[fullName]
            .split(",")
            .map((v) => v.trim());
          const variantsLower = variants.map((v) => v.toLowerCase());

          if (
            fullNameLower === inputNameLower ||
            variantsLower.includes(inputNameLower)
          ) {
            fullNameMatches.push(fullName);
            foundVariants.push(fullName, ...variants);
          }
        }

        if (fullNameMatches.length > 0) {
          const message = `–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${inputName}! ü§ó\n–ö–∞–∫ —Ç–µ–±–µ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?`;
          foundVariants = [...new Set(foundVariants)].filter(
            (variant) => variant.toLowerCase() !== inputNameLower
          );
          const keyboard = {
            inline_keyboard: [
              [{ text: `–û—Å—Ç–∞–≤–∏—Ç—å ${inputName}`, callback_data: "keep_name" }],
            ],
          };

          for (let i = 0; i < foundVariants.length; i += 4) {
            const row = foundVariants.slice(i, i + 4).map((variant) => ({
              text: variant,
              callback_data: `choose_name_${variant}`,
            }));
            keyboard.inline_keyboard.push(row);
          }

          const sentMessage = await bot.sendMessage(chatId, message, {
            reply_markup: JSON.stringify(keyboard),
          });
          user.helloMessages.push(sentMessage.message_id);
          user.state = "choosing_name";
          await saveUserData(user);
        } else {
          user.state = null;
          await saveUserData(user);
          await updateUserCommands(chatId);
          const message = `–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${inputName}! ü§ó\n–•–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –¥–µ–ª–∞–ª —Ç–≤–æ–π –¥–µ–Ω—å —á—É—Ç–æ—á–∫—É –ª—É—á—à–µ? –Ø –º–æ–≥—É –∂–µ–ª–∞—Ç—å —Ç–µ–±–µ –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞ –¥–ª—è –±–æ–¥—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –∏ —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏ –¥–ª—è —Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤. –ö–∞–∫ —Ç–µ–±–µ –∏–¥–µ–π–∫–∞? ‚ò∫Ô∏è`;
          const keyboard = {
            inline_keyboard: [
              [
                { text: "–í—Ä–µ–º—è –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è üåû", callback_data: "set_morning" },
                {
                  text: "–í—Ä–µ–º—è –ª–æ–∂–∏—Ç—å—Å—è —Å–ø–∞—Ç—å üåô",
                  callback_data: "set_evening",
                },
              ],
            ],
          };
          const sentMessage = await bot.sendMessage(chatId, message, {
            reply_markup: JSON.stringify(keyboard),
          });
          user.helloMessages.push(sentMessage.message_id);
          await saveUserData(user);
        }
      } else if (
        user.state === "waiting_for_morning_time" ||
        user.state === "waiting_for_evening_time"
      ) {
        user.userTimeInputMessages.push(msg.message_id);

        const timeRegex = /^(\d{1,2}):(\d{2})(?:\s*(UTC[+-]\d+))?$/;
        const match = text.match(timeRegex);

        if (match) {
          const hours = parseInt(match[1], 10);
          const minutes = parseInt(match[2], 10);
          const timezoneInput = match[3];
          let offset = user.timezone || "+03:00";

          if (timezoneInput) {
            offset = convertToOffset(timezoneInput);
            user.timezone = offset;
          }

          if (hours >= 0 && hours < 24 && minutes >= 0 && minutes < 60) {
            const timeStr = `${hours.toString().padStart(2, "0")}:${minutes
              .toString()
              .padStart(2, "0")}`;
            const period =
              user.state === "waiting_for_morning_time" ? "–£—Ç—Ä–æ" : "–ù–æ—á—å";
            if (user.state === "waiting_for_morning_time") {
              user.morningTime = timeStr;
            } else {
              user.eveningTime = timeStr;
            }
            user.state = null;

            if (user.timeRequestMessages.length > 0) {
              for (const messageId of user.timeRequestMessages) {
                try {
                  await bot.deleteMessage(chatId, messageId);
                } catch (error) {
                  console.error(
                    `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId}: ${error.message}`
                  );
                }
              }
              user.timeRequestMessages = [];
            }

            if (user.userTimeInputMessages.length > 0) {
              for (const messageId of user.userTimeInputMessages) {
                try {
                  await bot.deleteMessage(chatId, messageId);
                } catch (error) {
                  console.error(
                    `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId}: ${error.message}`
                  );
                }
              }
              user.userTimeInputMessages = [];
            }

            await saveUserData(user);

            const tzText = formatTimezone(offset);
            const remaining = calculateRemainingTime(
              user,
              period.toLowerCase() === "—É—Ç—Ä–æ" ? "morning" : "evening"
            );
            const remainingText = formatRemainingTime(
              remaining.hoursLeft,
              remaining.minutesLeft
            );
            const verb = period === "–£—Ç—Ä–æ" ? "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ" : "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞";
            let message = `${period} ${verb} –Ω–∞ ${timeStr}${tzText} (–æ—Å—Ç–∞–ª–æ—Å—å ${remainingText})`;

            const otherPeriod = period === "–£—Ç—Ä–æ" ? "–ù–æ—á—å" : "–£—Ç—Ä–æ";
            const otherTime =
              period === "–£—Ç—Ä–æ" ? user.eveningTime : user.morningTime;
            if (otherTime) {
              const otherRemaining = calculateRemainingTime(
                user,
                period === "–£—Ç—Ä–æ" ? "evening" : "morning"
              );
              const otherRemainingText = formatRemainingTime(
                otherRemaining.hoursLeft,
                otherRemaining.minutesLeft
              );
              const otherVerb =
                otherPeriod === "–£—Ç—Ä–æ" ? "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ" : "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞";
              message += `\n${otherPeriod} ${otherVerb} –Ω–∞ ${otherTime}${tzText} (–æ—Å—Ç–∞–ª–æ—Å—å ${otherRemainingText})`;
            } else {
              const otherVerb =
                otherPeriod === "–£—Ç—Ä–æ"
                  ? "–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"
                  : "–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞";
              message += `\n${otherPeriod} ${otherVerb}`;
            }

            const keyboard = getKeyboard(user, false);
            const sentMessage = await bot.sendMessage(chatId, message, {
              reply_markup: JSON.stringify(keyboard),
            });
            user.helloMessages.push(sentMessage.message_id);
            await saveUserData(user);
          } else {
            const sentMessage = await bot.sendMessage(
              chatId,
              "–£–∫–∞–∂–∏ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, 23:59 –∏–ª–∏ 23:59 UTC+10"
            );
            user.timeRequestMessages.push(sentMessage.message_id);
            await saveUserData(user);
          }
        } else {
          const sentMessage = await bot.sendMessage(
            chatId,
            "–£–∫–∞–∂–∏ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, 23:59 –∏–ª–∏ 23:59 UTC+10"
          );
          user.timeRequestMessages.push(sentMessage.message_id);
          await saveUserData(user);
        }
      }
    }
  });

  bot.on("callback_query", async (query) => {
    const chatId = query.message.chat.id.toString();
    const messageId = query.message.message_id;
    const data = query.data;
    const user = await getUserData(chatId);

    user.helloMessages = user.helloMessages || [];
    user.timeRequestMessages = user.timeRequestMessages || [];

    if (data.startsWith("choose_name_")) {
      const chosenName = data.replace("choose_name_", "");
      user.name = chosenName;
      user.state = null;
      await saveUserData(user);
      await updateUserCommands(chatId);
      await bot.deleteMessage(chatId, messageId);
      const message = `–û—Ç–ª–∏—á–Ω–æ, ${chosenName}! ü§ó\n–•–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –¥–µ–ª–∞–ª —Ç–≤–æ–π –¥–µ–Ω—å —á—É—Ç–æ—á–∫—É –ª—É—á—à–µ? –Ø –º–æ–≥—É –∂–µ–ª–∞—Ç—å —Ç–µ–±–µ –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞ –¥–ª—è –±–æ–¥—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –∏ —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏ –¥–ª—è —Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤. –ö–∞–∫ —Ç–µ–±–µ –∏–¥–µ–π–∫–∞? ‚ò∫Ô∏è`;
      const keyboard = {
        inline_keyboard: [
          [
            { text: "–í—Ä–µ–º—è –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è üåû", callback_data: "set_morning" },
            { text: "–í—Ä–µ–º—è –ª–æ–∂–∏—Ç—å—Å—è —Å–ø–∞—Ç—å üåô", callback_data: "set_evening" },
          ],
        ],
      };
      const sentMessage = await bot.sendMessage(chatId, message, {
        reply_markup: JSON.stringify(keyboard),
      });
      user.helloMessages.push(sentMessage.message_id);
      await saveUserData(user);
    } else if (data === "keep_name") {
      user.state = null;
      await saveUserData(user);
      await updateUserCommands(chatId);
      await bot.deleteMessage(chatId, messageId);
      const message = `–û—Ç–ª–∏—á–Ω–æ, ${user.name}! ü§ó\n–•–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –¥–µ–ª–∞–ª —Ç–≤–æ–π –¥–µ–Ω—å —á—É—Ç–æ—á–∫—É –ª—É—á—à–µ? –Ø –º–æ–≥—É –∂–µ–ª–∞—Ç—å —Ç–µ–±–µ –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞ –¥–ª—è –±–æ–¥—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –∏ —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏ –¥–ª—è —Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤. –ö–∞–∫ —Ç–µ–±–µ –∏–¥–µ–π–∫–∞? ‚ò∫Ô∏è`;
      const keyboard = {
        inline_keyboard: [
          [
            { text: "–í—Ä–µ–º—è –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è üåû", callback_data: "set_morning" },
            { text: "–í—Ä–µ–º—è –ª–æ–∂–∏—Ç—å—Å—è —Å–ø–∞—Ç—å üåô", callback_data: "set_evening" },
          ],
        ],
      };
      const sentMessage = await bot.sendMessage(chatId, message, {
        reply_markup: JSON.stringify(keyboard),
      });
      user.helloMessages.push(sentMessage.message_id);
      await saveUserData(user);
    } else if (data === "set_morning") {
      await bot.deleteMessage(chatId, messageId);
      const sentMessage = await bot.sendMessage(
        chatId,
        "–í–æ —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ø–æ–∂–µ–ª–∞—Ç—å –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞? –£–∫–∞–∂–∏ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00. –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é UTC+3, –Ω–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00 UTC+10."
      );
      user.lastRequestMessageId = sentMessage.message_id;
      user.helloMessages.push(sentMessage.message_id);
      user.timeRequestMessages.push(sentMessage.message_id);
      user.state = "waiting_for_morning_time";
      await saveUserData(user);
    } else if (data === "set_evening") {
      await bot.deleteMessage(chatId, messageId);
      const sentMessage = await bot.sendMessage(
        chatId,
        "–í–æ —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ø–æ–∂–µ–ª–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏? –£–∫–∞–∂–∏ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, 22:00. –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é UTC+3, –Ω–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, 22:00 UTC+10."
      );
      user.lastRequestMessageId = sentMessage.message_id;
      user.helloMessages.push(sentMessage.message_id);
      user.timeRequestMessages.push(sentMessage.message_id);
      user.state = "waiting_for_evening_time";
      await saveUserData(user);
    } else if (data === "reset_morning") {
      user.morningTime = null;
      await saveUserData(user);
      await bot.deleteMessage(chatId, messageId);
      let message = "–í—Ä–µ–º—è –Ω–∞ —É—Ç—Ä–æ —Å–±—Ä–æ—à–µ–Ω–æ üëç";
      if (user.eveningTime) {
        const remaining = calculateRemainingTime(user, "evening");
        const remainingText = formatRemainingTime(
          remaining.hoursLeft,
          remaining.minutesLeft
        );
        const tzText = formatTimezone(user.timezone || "+03:00");
        message += `\n–ù–æ—á—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ ${user.eveningTime}${tzText} (–æ—Å—Ç–∞–ª–æ—Å—å ${remainingText})`;
      } else {
        message += `\n–ù–æ—á—å –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞`;
      }

      const keyboard = getKeyboard(user, false);
      const sentMessage = await bot.sendMessage(chatId, message, {
        reply_markup: JSON.stringify(keyboard),
      });
      user.helloMessages.push(sentMessage.message_id);
      await saveUserData(user);
    } else if (data === "reset_evening") {
      user.eveningTime = null;
      await saveUserData(user);
      await bot.deleteMessage(chatId, messageId);
      let message = "–í—Ä–µ–º—è –Ω–∞ –Ω–æ—á—å —Å–±—Ä–æ—à–µ–Ω–æ üëç";
      if (user.morningTime) {
        const remaining = calculateRemainingTime(user, "morning");
        const remainingText = formatRemainingTime(
          remaining.hoursLeft,
          remaining.minutesLeft
        );
        const tzText = formatTimezone(user.timezone || "+03:00");
        message += `\n–£—Ç—Ä–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ ${user.morningTime}${tzText} (–æ—Å—Ç–∞–ª–æ—Å—å ${remainingText})`;
      } else {
        message += `\n–£—Ç—Ä–æ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ`;
      }

      const keyboard = getKeyboard(user, false);
      const sentMessage = await bot.sendMessage(chatId, message, {
        reply_markup: JSON.stringify(keyboard),
      });
      user.helloMessages.push(sentMessage.message_id);
      await saveUserData(user);
    } else if (data === "forget_name") {
      user.name = null;
      user.morningTime = null;
      user.eveningTime = null;
      user.state = "waiting_for_name";
      await saveUserData(user);
      await updateUserCommands(chatId);
      await bot.deleteMessage(chatId, messageId);
      const message = "–¢—ã –∫—Ç–æ? ü§®";
      const keyboard = {
        inline_keyboard: [
          [
            {
              text: "–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è üëã",
              callback_data: "introduce",
            },
          ],
        ],
      };
      const sentMessage = await bot.sendMessage(chatId, message, {
        reply_markup: JSON.stringify(keyboard),
      });
      user.helloMessages.push(sentMessage.message_id);
      await saveUserData(user);
    } else if (data === "introduce") {
      await bot.deleteMessage(chatId, messageId);
      const sentMessage = await bot.sendMessage(
        chatId,
        "–ü—Ä–∏–≤–µ—Ç–∏–∫ üëãüòú —è –ü—É–ø—Å–∏–∫ ü§ó –ê –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
      );
      user.lastRequestMessageId = sentMessage.message_id;
      user.helloMessages.push(sentMessage.message_id);
      user.state = "waiting_for_name";
      await saveUserData(user);
    }

    await bot.answerCallbackQuery(query.id);
  });

  cron.schedule("* * * * *", async () => {
    const usersCollection = await db.getUsersCollection();
    const users = await usersCollection.find({}).toArray();
    for (const user of users) {
      const tz = user.timezone || "+03:00";
      const nowInUserOffset = moment().utcOffset(tz);

      if (
        user.morningTime &&
        nowInUserOffset.format("HH:mm") === user.morningTime
      ) {
        const greetingTemplate = morningGreetings[user.morningGreetingIndex];
        const greeting = greetingTemplate.replace("{name}", user.name);
        user.morningGreetingIndex =
          (user.morningGreetingIndex + 1) % morningGreetings.length;
        await saveUserData(user);
        const factMessage = await getAndMarkRandomFact(user);
        const greetingMessage = `${greeting}\n\n<tg-spoiler>${factMessage}</tg-spoiler>`;
        await bot.sendMessage(user.chatId, greetingMessage, {
          parse_mode: "HTML",
        });
        updateUserDataInSheet(user).catch((error) => {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets:", error);
        });
        const randomSticker =
          allStickers[Math.floor(Math.random() * allStickers.length)];
        try {
          await bot.sendSticker(user.chatId, randomSticker.file_id);
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞ –¥–ª—è ${user.chatId}:`, error);
        }
      }

      if (
        user.eveningTime &&
        nowInUserOffset.format("HH:mm") === user.eveningTime
      ) {
        const greetingTemplate = eveningGreetings[user.eveningGreetingIndex];
        const greeting = greetingTemplate.replace("{name}", user.name);
        user.eveningGreetingIndex =
          (user.eveningGreetingIndex + 1) % eveningGreetings.length;
        await saveUserData(user);
        const factMessage = await getAndMarkRandomFact(user);
        const greetingMessage = `${greeting}\n\n<tg-spoiler>${factMessage}</tg-spoiler>`;
        await bot.sendMessage(user.chatId, greetingMessage, {
          parse_mode: "HTML",
        });
        updateUserDataInSheet(user).catch((error) => {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets:", error);
        });
        const randomSticker =
          allStickers[Math.floor(Math.random() * allStickers.length)];
        try {
          await bot.sendSticker(user.chatId, randomSticker.file_id);
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞ –¥–ª—è ${user.chatId}:`, error);
        }
      }
    }
  });
}

module.exports = setupGreetings;
